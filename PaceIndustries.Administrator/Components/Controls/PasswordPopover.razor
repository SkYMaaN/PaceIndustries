<MudPopover Open="@Open" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.TopCenter">
    <MudImage Src="Images/Logos/Logo.png" Style="width: 300px;" Class="rounded-lg" />
    <MudText Typo="Typo.h5">Create password</MudText>

    <EditForm Model="@_passwordModel" OnValidSubmit="OnValidSave" FormName="CreatePasswordForm">
        <DataAnnotationsValidator />

        <MudTextField Label="Password" @bind-Value="_passwordModel.Password" For="@(() => _passwordModel.Password)" />

        <MudText Style="@($"color:{Colors.Red.Accent3};")" Align="Align.Center" Class="mb-4">@_errorMessage</MudText>

        <div class="d-flex justify-content-end mt-3">
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Class="mr-2">Set</MudButton>

            <MudButton OnClick="@ToggleOpen" Color="Color.Error">Close</MudButton>
        </div>
    </EditForm>
</MudPopover>

@code {
    private NewPasswordModel _passwordModel = new();

    [Inject]
    private ApplicationDbContext _dbContext { get; set; }

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public EventCallback<Pw> OnPasswordCreated { get; set; }

    [Parameter]
    public EventCallback<Pw> OnPasswordUpdated { get; set; }

    [Parameter]
    public string UserEmail { get; set; }

    private string _errorMessage;

    private async Task OnValidSave()
    {
        Pw? pw = _dbContext.Pws.FirstOrDefault(p => p.Email.Equals(UserEmail));

        if (pw == null)
        {
            pw = new Pw()
                {
                    Email = UserEmail,
                    PasswordHash = _passwordModel.Password,
                    Salt = _passwordModel.Password,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now,
                };

            _dbContext.Pws.Add(pw);
            await OnPasswordCreated.InvokeAsync(pw);
        }
        else
        {
            pw.PasswordHash = _passwordModel.Password;
            pw.Salt = _passwordModel.Password;
            pw.UpdatedAt = DateTime.Now;

            _dbContext.Pws.Update(pw);
            await OnPasswordUpdated.InvokeAsync(pw);
        }

        int result = _dbContext.SaveChanges();

        if(result > 0)
        {
            _passwordModel.Password = String.Empty;
            _errorMessage = String.Empty;

            ToggleOpen();
        }
        else
        {
            _errorMessage = "Error. Password is not set.";
        }
    }

    private void ToggleOpen()
    {
        Open = !Open;
        OpenChanged.InvokeAsync(Open);
    }

    private class NewPasswordModel
    {
        [Required(ErrorMessage = "Password required")]
        [Length(6, 16, ErrorMessage = "Password length must be beetween 6 and 16 symbols.")]
        public string Password { get; set; } // = "Password1";
    }
}
