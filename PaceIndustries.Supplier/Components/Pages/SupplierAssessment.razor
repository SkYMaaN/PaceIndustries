@page "/supplier-assessment"

@attribute [Authorize]

<PageTitle>SupplierAssessment</PageTitle>

<MudPaper Width="100%" Elevation="3" Class="pa-4">
    <MudStack Direction="Column" Spacing="2">
        <MudText Typo="Typo.h5">Upload Assessment</MudText>
        <MudText Typo="Typo.body1">Please upload Excel file.</MudText>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFilesAsync" Accept=".xlsx, .xls">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Upload Assessment</MudButton>

                <MudText Color="Color.Error">@_errorMessage</MudText>
            </ActivatorContent>
        </MudFileUpload>

        @if (_assessments != null && _assessments.Any())
        {
            <MudText Typo="@Typo.h6">@_assessments.Count() File@(_assessments.Count() == 1 ? String.Empty : "s"):</MudText>
            <MudList T="string">
                @foreach (var assessment in _assessments)
                {
                    <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                        <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                            <span style="margin-right: auto;">
                                @assessment.FileName <code>@assessment.FilePath</code>
                            </span>
                            <MudIconButton OnClick="@(() => DeleteAssessment(assessment.Id))" Icon="@Icons.Material.Filled.DeleteOutline" />
                        </div>
                    </MudListItem>
                }
            </MudList>
        }
    </MudStack>
</MudPaper>

@code {
    private const string SavePath = "C:\\SupplierUploadASMT";

    private const long MaxFileSize = 5 * 1024 * 1024;

    [Inject]
    private ApplicationDbContext _dbContext { get; set; }

    [Inject]
    private CachedUserData _cachedUserData { get; set; }

    private List<PSupplierUploadAsmt> _assessments;

    private IBrowserFile _file;

    private string _errorMessage;

    protected override void OnInitialized()
    {
        _assessments = LoadAssessments();

        Directory.CreateDirectory(SavePath);
    }

    private async Task UploadFilesAsync(IBrowserFile file)
    {
        _errorMessage = String.Empty;
        if (file == null)
        {
            return;
        }

        if (file.Size > MaxFileSize)
        {
            _errorMessage = "The file exceeds the maximum allowed size of 5 megabytes.";
            return;
        }

        string newFileName = $"{_cachedUserData.ParentKey}_{file.Name}";
        string filePath = Path.Combine(SavePath, newFileName);

        var assessment = new PSupplierUploadAsmt()
            {
                Email = _cachedUserData.Email,
                ParentKey = _cachedUserData.ParentKey,
                ParentCompanyId = _cachedUserData.ParentCompanyId,
                FileName = newFileName,
                FilePath = filePath,
                CreatedAt = DateTime.Now,
            };

        try
        {
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream(maxAllowedSize: MaxFileSize).CopyToAsync(stream);
            }

            _dbContext.PSupplierUploadAsmts.Add(assessment);

            if (_dbContext.SaveChanges() > 0)
            {
                _assessments.Add(assessment);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred while saving the file.";
        }
    }

    private void DeleteAssessment(int assessmentId)
    {
        _errorMessage = String.Empty;

        var assessment = _dbContext.PSupplierUploadAsmts.FirstOrDefault(c => c.Id.Equals(assessmentId));

        if (assessment == null)
        {
            _errorMessage = "Assessment not exist.";
            return;
        }

        _dbContext.PSupplierUploadAsmts.Remove(assessment);

        if (_dbContext.SaveChanges() > 0)
        {
            _assessments.Remove(_assessments.First(a => a.Id.Equals(assessment.Id)));
        }
    }

    private List<PSupplierUploadAsmt> LoadAssessments()
    {
        _errorMessage = String.Empty;

        var supplierIds = _cachedUserData.Contacts.Select(c => c.ParentKey).ToList();

        var companyIds = _cachedUserData.Contacts.Select(c => c.ParentCompanyId).ToList();

        var assessments = _dbContext.PSupplierUploadAsmts.AsNoTracking().Where(f => (supplierIds.Contains(f.ParentKey) && companyIds.Contains(f.ParentCompanyId))).ToList();

        return assessments;
    }
}
